= Command Line Options

Configurable guesses a command-line option for each config, based on the
config name (ex: --name for :name, -n for :n). To specify alternatives use a
prefix section in the documentation.

  class ConfigClass
    include Configurable
    config :a, nil   # -a, --aaa ARGNAME  : cmdline options may be
    config :b, nil   # -b                 : declared in the docs
    config :c, nil   #     --ccc          : using a prefix
    config :d, nil   #                    : an empty prefix implies 'hidden'
    config :e, nil   # no prefix uses the defaults
  end

  stdout = []
  argv = %w{--help}
  ConfigClass.configs.to_parser do |psr|
    psr.on('--help', 'print this help') do 
      stdout << "options:"
      stdout << psr
    end
  end.parse(argv)

  stdout.join("\n")
  # options:
  #     -a, --aaa ARGNAME                cmdline options may be
  #     -b B                             declared in the docs
  #         --ccc C                      using a prefix
  #     -e E                             no prefix uses the defaults
  #         --help                       print this help

If necessary you can specify all the options manually:

  class EquivalentConfigClass
    include Configurable
    config :a, nil, :long => 'aaa', :short => 'a', :arg_name => 'ARGNAME', :desc => 'cmdline options may be'
    config :b, nil, :long => nil, :short => 'b', :desc => 'declared in the docs'
    config :c, nil, :long => 'ccc', :short => nil, :desc => 'using a prefix'
    config :d, nil, :hidden => true, :desc => "an empty prefix implies 'hidden'"
    config :e, nil, :desc => "no prefix uses the defaults"
  end

Note that the default option is based on the config name, not the config key.
See other documents for the technical distinction.
