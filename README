= Configurable[http://tap.rubyforge.org/configurable]

Class configurations for the command line and web.

== Description

Configurable allows the declaration of class configurations.  Configurations
are inheritable, delegate to methods, and have hash-like access. Configurable
constructs configs such that they easily map to config files, web forms, and the command line.

Check out these links for development and bug tracking.

* Website[http://tap.rubyforge.org/configurable]
* Github[http://github.com/bahuvrihi/configurable/tree/master]
* {Google Group}[http://groups.google.com/group/ruby-on-tap]

==== Usage

Include Configurable and declare configurations using the config method.
Configs have accessors and initialize with the default value.  Casters
are guessed for common types (true/false, numbers, strings).

  class ConfigClass
    include Configurable
    config :flag, false                    # a flag
    config :switch, true                   # an on/off switch
    config :num, 3.14                      # a number
    config :lst, [1,2,3]                   # a list of integers
    config :str, 'value', :short => :s     # a string, with a short
  end

  c = ConfigClass.new
  c.num                   # => 3.14

Configs may be set through config (a kind of delegating hash):

  c.num = 6.022
  c.config[:num]          # => 6.022
  c.config[:num] = 1.61
  c.num                   # => 1.61

Configs may be exported and imported in a format easily translated to user interfaces, be they config files, web forms, or the command line.

  c.config.export
  # => {
  # 'flag' => false, 
  # 'switch' => true,
  # 'num' => 1.61, 
  # 'lst' => [1, 2, 3], 
  # 'str' => 'value'
  # }
  
  c.config.import('flag' => 'true', 'num' => '2.71', 'lst' => ['8', '9'])
  c.config.to_hash
  # => {
  # :flag => true, 
  # :switch => true,
  # :num => 2.71, 
  # :lst => [8,9],
  # :str => 'value'
  # }

Use a {ConfigParser}[http://tap.rubyforge.org/config_parser] to parse
configurations from the command line. Non-class options may be defined with
(mostly) the same syntax as
{OptionParser}[http://www.ruby-doc.org/core/classes/OptionParser.html]:

  # define other options a-la OptionParser
  parser = ConfigClass.configs.to_parser do |psr|
    psr.on '-h', '--help', 'print help' do |value|
      puts "ConfigClass options:"
      puts parser
    end
  end
  
  parser.class            # => ConfigParser
  parser.parse "one two --flag --no-switch --num=-1 --lst 3,6,9 -s val three"
  # => ['one', 'two', 'three']
  
  parser.config
  # => {
  # :flag => true,
  # :switch => false,
  # :num => -1,
  # :lst => [3, 6, 9],
  # :str => 'val'
  # }
  
  "\n" + parser.to_s
  # => %Q{
  #         --flag                       a flag
  #     -h, --help                       print help
  #         --lst [LST]                  a list of integers (1,2,3)
  #         --num NUM                    a number (3.14)
  #     -s, --str STR                    a string, with a short (value)
  #         --[no-]switch                an on/off switch
  # }

See the examples and documentation for details.

== Installation

Configurable is available as a gem on Gemcutter[http://gemcutter.org/gems/configurable].

  % gem install configurable

== Info 

Developer:: {Simon Chiang}[http://bahuvrihi.wordpress.com]
License:: {MIT-Style}[link:files/MIT-LICENSE.html]

